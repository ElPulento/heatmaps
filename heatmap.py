# -*- coding: utf-8 -*-
"""heatmap.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aS8rUnH8tlYvNEKD1MVGUyZNhjbw-cR7
"""

from google.colab import drive

drive.mount('/content/gdrive', force_remount=True)

# Normalizaci√≥n de x,y

def normalizacion(x,y):

  maxX = 1920
  minX = 0

  normalizedX=(x-minX)/(maxX-minX)

  maxY = 1080
  minY = 0

  normalizedX=(x-minX)/(maxX-minX)

  normalizedY=(y-minY)/(maxY-minY)

  return normalizedX, normalizedY

import matplotlib.pyplot as plt
import numpy as np

def slice(df, ruta_slice):

  # recortar solamente las fijaciones predichas correctamente (dentro de los limites de la pantalla)
  sliced = df.loc[(df["Ruta"] == ruta_slice) & ((df["X"] <= 1920) & (df["X"] > 0) & (df["Y"] < 1080) & (df["Y"] > 0)),  
                  
                  ["X","Y","Timestamp"]]

  x = sliced["X"]
  y = sliced["Y"]*-1

  #print(y)

  return x, y

def concadenar_data(x,y,df,ruta_slice):
  
  sliced = df.loc[(df["Ruta"] == ruta_slice) & ((df["X"] <= 1920) & (df["X"] > 0) & (df["Y"] < 1080) & (df["Y"] > 0)),  

                ["X","Y","Timestamp"]]

  x = x.append(sliced["X"])
  y = y.append(sliced["Y"]*-1)  

  return x, y

import pandas as pd
import os
import csv

def readFile(data):
  df = pd.read_csv(data, usecols=col_list) 
  return df

dir = '/content/gdrive/MyDrive/Universidad/Tesis/Proyecto/resultados'
os.chdir(dir) # change colab current directory

# leyendo y extrayendo columnas del csv

col_list = ["X", "Y", "Ruta", "Timestamp"]

first_file = True

ruta_slice = "http://localhost:4200/marketplace/view-list-products"

for file in os.listdir(dir):
  if file.endswith(".csv"):

    df = readFile(file)

    if(first_file): # concadenando eye data usando como condicion la ruta_slice
      
      first_file = False
      x, y = slice(df, ruta_slice)
      print(y, file)

    else:
      x, y = concadenar_data(x, y, df, ruta_slice)
      print(y, file)

# crear grafico

fig, ax = plt.subplots()

# size and color:
sizes = np.random.uniform(15, 80, len(x))
colors = np.random.uniform(15, 80, len(x))

ax.set_facecolor('cyan')

ax.scatter(x, y, s=5, c=colors, vmin=0, vmax=100)

"""Funciona ahora quiero cambiar el formato para que sea heatmap."""

heatmap, xedges, yedges = np.histogram2d(x, y, bins=(150))
extent = [xedges[0], xedges[-1], yedges[0], yedges[-1]]

plt.clf()
plt.imshow(heatmap.T, extent=extent, origin='lower')

# Add title and labels to plot.
plt.title('Heatmap of eye data in view-products')
plt.xlabel('x axis')
plt.ylabel('y axis')

# Plot a colorbar with label.
cb = plt.colorbar()
cb.set_label('Number of entries')

plt.show()